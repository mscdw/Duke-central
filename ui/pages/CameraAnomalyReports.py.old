import streamlit as st
import pandas as pd
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from pandas import json_normalize
import requests  # For making API calls to get images
import base64
from PIL import Image
from io import BytesIO

# --- Configuration ---
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "appearances"
CAMERA_COLLECTION = "camera_anomaly_reports"
PERSON_COLLECTION = "anomaly_reports"
# NEW: Add the API URL for fetching images
API_URL = "http://localhost:8001" # Or st.secrets.get("API_BASE", "http://localhost:8001")


# --- Data Loading Functions (from MongoDB) ---
@st.cache_data(ttl=600)
def load_data(collection_name):
    """Loads data from a specified MongoDB collection."""
    try:
        client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
        client.admin.command('ismaster')
        db = client[DB_NAME]
        collection = db[collection_name]
        records = list(collection.find({}, {"_id": 0}))
        if not records:
            st.warning(f"No records found in the '{DB_NAME}.{collection_name}' collection.")
            return pd.DataFrame()
        df = json_normalize(records)
        if 'anomaly_timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['anomaly_timestamp'], format='ISO8601')
            df = df.drop(columns=['anomaly_timestamp'])
        elif 'timestamp' in df.columns:
            df['timestamp'] = pd.to_datetime(df['timestamp'], format='ISO8601')
        return df
    except ConnectionFailure:
        st.error(f"Could not connect to MongoDB at {MONGO_URI}. Please ensure it's running.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"An error occurred while loading data: {e}")
        return pd.DataFrame()

# --- Helper Functions ---

# NEW: Helper function to get a person's face image from the API
@st.cache_data(show_spinner=False)
def get_face_image(person_id):
    """ Fetches and caches the representative face image for a given personId. """
    if not person_id or person_id == "N/A":
        return None
    try:
        params = {"personId": person_id, "personIdOnly": True}
        resp = requests.get(f"{API_URL}/get-appearances", params=params, timeout=10)
        resp.raise_for_status()
        events = resp.json()
        if not events: return None
        
        event = events[0]
        img_b64 = event.get("imageBaseString")
        if not img_b64: return None
        
        img_bytes = base64.b64decode(img_b64)
        image = Image.open(BytesIO(img_bytes))
        
        if event.get("personFace") and event["personFace"].get("BoundingBox"):
            bbox = event["personFace"]["BoundingBox"]
            width, height = image.size
            left, top = int(bbox["Left"] * width), int(bbox["Top"] * height)
            right, bottom = int((bbox["Left"] + bbox["Width"]) * width), int((bbox["Top"] + bbox["Height"]) * height)
            return image.crop((left, top, right, bottom))
        return image
    except Exception as e:
        print(f"Error fetching face image for {person_id}: {e}")
        return None

def get_priority_icon(priority):
    icon_map = {"CRITICAL": "üõë", "HIGH": "‚ö†Ô∏è", "MEDIUM": "üî∂", "LOW": "‚ÑπÔ∏è", "N/A": "‚ö™"}
    return icon_map.get(str(priority).upper(), "‚ùì")

# --- Initialize Session State for Caching ---
if "person_occurrences_cache" not in st.session_state:
    st.session_state.person_occurrences_cache = {}

# --- Streamlit App Layout ---
st.set_page_config(page_title="Unified Anomaly Dashboard", layout="wide")
st.title("üì∑üë§ Unified Anomaly Dashboard")
st.markdown("This dashboard displays both person-centric and camera-centric anomaly reports.")

# --- Sidebar Controls ---
st.sidebar.header("View & Filter Options")
anomaly_type = st.sidebar.radio("Select Anomaly Type", ("Person-Centric", "Camera-Centric"))

if anomaly_type == "Person-Centric":
    df = load_data(PERSON_COLLECTION)
    id_column = 'personId'
    page_header = "Person Anomaly Reports"
else:
    df = load_data(CAMERA_COLLECTION)
    id_column = 'camera_identifier'
    page_header = "Camera Anomaly Reports"

st.header(page_header)

if not df.empty:
    # Standardize columns for consistency
    df['model_type'] = df['model_config.model_choice']
    df['ai_triage.priority'] = df.get('ai_triage.priority', pd.Series(dtype='str')).fillna('N/A')
    
    if id_column not in df.columns:
        st.error(f"Data is missing the required ID column: '{id_column}'.")
        st.stop()
        
    # --- Sidebar Filters ---
    selected_ids = st.sidebar.multiselect(f"Filter by {id_column.replace('_', ' ').title()}", options=sorted(df[id_column].unique()), default=sorted(df[id_column].unique()))
    selected_models = st.sidebar.multiselect("Filter by Model Type", options=sorted(df['model_type'].unique()), default=sorted(df['model_type'].unique()))
    priority_order = ["CRITICAL", "HIGH", "MEDIUM", "LOW", "N/A"]
    sorted_priorities = sorted(df['ai_triage.priority'].unique(), key=lambda x: priority_order.index(x) if x in priority_order else len(priority_order))
    selected_priorities = st.sidebar.multiselect("Filter by AI Triage Priority", options=sorted_priorities, default=sorted_priorities)

    # --- Apply Filters ---
    filtered_df = df[df[id_column].isin(selected_ids) & df['model_type'].isin(selected_models) & df['ai_triage.priority'].isin(selected_priorities)]

    # --- Main Display Area ---
    st.dataframe(filtered_df.drop(columns=[col for col in ['explanation.model_driven_insight', 'explanation.rule_based', 'ai_triage.insight'] if col in filtered_df.columns], errors='ignore'))
    
    st.header("Anomaly Counts")
    col1, col2 = st.columns(2)
    col1.subheader(f"Anomalies per {id_column.replace('_', ' ').title()}"); col1.bar_chart(filtered_df[id_column].value_counts())
    col2.subheader("Anomalies by Model Type"); col2.bar_chart(filtered_df['model_type'].value_counts())
    
    st.header("Detailed Anomaly Insights")
    
    for idx, row in filtered_df.iterrows():
        # --- Generate Expander Title ---
        priority = row.get('ai_triage.priority', 'N/A')
        date_str = row['timestamp'].strftime('%Y-%m-%d') if pd.notna(row.get('timestamp')) else 'N/A'
        title_subject = "General Anomaly"
        rule_based = row.get('explanation.rule_based', [])
        model_driven = row.get('explanation.model_driven_insight', [])
        
        if isinstance(rule_based, list) and rule_based:
            title_subject = ", ".join(set([item.get('category', 'Anomaly') for item in rule_based]))
        elif isinstance(model_driven, list) and model_driven:
            try:
                sorted_insights = sorted(model_driven, key=lambda x: x.get('contribution_pct', 0), reverse=True)
                title_subject = ", ".join([str(insight.get('feature', 'N/A')) for insight in sorted_insights[:3]])
            except (TypeError, KeyError): title_subject = "Model-Driven Anomaly"
        
        expander_title = (f"{get_priority_icon(priority)} {priority.upper()} | {title_subject} | "
                          f"{id_column.replace('_', ' ').title()}: {row[id_column]} | Date: {date_str}")
        
        with st.expander(expander_title):
            # --- Conditional Rendering: Person vs. Camera ---
            if anomaly_type == "Person-Centric":
                st.subheader("Report Details")
                person_id = row.get(id_column)
                details_col1, details_col2 = st.columns([1, 4])
                with details_col1:
                    face_image = get_face_image(person_id)
                    if face_image:
                        st.image(face_image, use_container_width=True, caption=f"Person: {person_id}")
                    else:
                        st.markdown("<div style='height: 128px; border: 1px solid #444; border-radius: 4px; display:flex; align-items:center; justify-content:center; font-size:4em;'>üë§</div>", unsafe_allow_html=True)
                        st.caption("No Image")
                with details_col2:
                    st.markdown(f"**Person ID:** `{person_id}`")
                    st.markdown(f"**Anomaly Timestamp:** {row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')+'Z' if pd.notna(row.get('timestamp')) else 'N/A'}")
                    st.markdown(f"**Model Type:** {row['model_type']}")
                    st.markdown(f"**Anomaly ID:** `{row.get('anomaly_id', 'N/A')}`")
                st.divider()

                st.subheader("Anomaly Breakdown")
                break_col1, break_col2 = st.columns([1, 2])
                with break_col1:
                    st.metric("Anomaly Score", value=row.get('anomaly_details.score', 0))
                    st.write(f"Raw Error: {row.get('anomaly_details.raw_error', 0):.4f}")
                    st.write(f"Threshold: {row.get('anomaly_details.threshold', 0):.4f}")
                with break_col2:
                    st.markdown("**AI Triage Insight**")
                    st.info(f"{row.get('ai_triage.insight', 'No insight available.')}")
                
                st.divider()
                # --- Historical Appearances Section ---
                st.subheader(f"Historical Appearances for Person `{person_id}`")
                
                if person_id in st.session_state.person_occurrences_cache:
                    events = st.session_state.person_occurrences_cache[person_id]
                    if not events:
                        st.info("No historical appearances found for this person.")
                    else:
                        st.metric("Total Occurrences Found", len(events))
                        with st.container(height=400):
                            for event in events:
                                img_col, data_col = st.columns([1, 3])
                                with img_col:
                                    img_b64 = event.get("imageBaseString")
                                    if img_b64: st.image(base64.b64decode(img_b64), use_container_width=True)
                                with data_col:
                                    event_time_str = event.get("eventStartTime", "Unknown").replace("T", " ").split(".")[0]
                                    st.markdown(f"**Time:** `{event_time_str}Z`")
                                    st.markdown(f"**Camera:** `{event.get('cameraId', 'N/A')}`")
                                    st.markdown(f"**Confidence:** `{event.get('personFace', {}).get('Confidence', 0):.1f}%`")
                                st.divider()
                else:
                    if st.button("Load Historical Appearances", key=f"load_app_{row.get('anomaly_id')}"):
                        with st.spinner(f"Loading appearances for person {person_id}..."):
                            try:
                                params = {"personId": person_id}
                                resp = requests.get(f"{API_URL}/get-appearances", params=params, timeout=20)
                                resp.raise_for_status()
                                st.session_state.person_occurrences_cache[person_id] = resp.json()
                            except Exception as e:
                                st.error(f"Could not load appearances: {e}")
                                st.session_state.person_occurrences_cache[person_id] = []
                        st.rerun()

            else: # --- Camera-Centric View (the original, simpler view) ---
                st.markdown(f"**Model Type:** {row['model_type']}")
                st.markdown(f"**Anomaly ID:** `{row.get('anomaly_id', 'N/A')}`")
                st.markdown("---")
                st.write("### AI Triage Insight:")
                st.info(row.get('ai_triage.insight', 'No insight available.'))

                st.markdown("### Explanation Details")
                if isinstance(rule_based, list) and rule_based:
                    st.markdown("**Rule-Based Insights:**")
                    for item in rule_based: st.markdown(f"- **{item.get('category', 'N/A')}**: {item.get('description', 'No description')}")
                else: st.markdown("_No rule-based insights available._")

                if isinstance(model_driven, list) and model_driven:
                    st.markdown("**Model-Driven Insights:**")
                    try: st.dataframe(pd.DataFrame(model_driven))
                    except Exception: st.write(model_driven)
                else: st.markdown("_No model-driven insights available._")

else:
    st.info("Waiting for data... Ensure the corresponding pipeline has been run with the `--write-to-mongo` flag.")